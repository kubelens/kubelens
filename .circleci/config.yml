# https://circleci.com/docs/2.0/workflows-overview/
workflows:
  version: 2
  test_build_deploy:
    jobs:
      - api_build:
          filters:
            branches:
              only: 
                - staging
                - master
      - web_build:
          filters:
            branches:
              only: 
                - staging
                - master
                
  test_build_new_branch:
    jobs:
      - api_new_branch:
          filters:
            branches:
              ignore:
                - staging
                - master
      - web_new_branch:
          filters:
            branches:
              ignore: 
                - staging
                - master

# https://circleci.com/docs/2.0/getting-started/#section=getting-started
version: 2
jobs:
  api_new_branch:
    docker: 
      - image: circleci/golang:latest
    environment:
      GOBIN: /go/bin
    working_directory: /go/src/github.com/kubelens/kubelens
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Test
          command: |
            cd ./api 
            make test

  api_build:
    docker: 
      - image: circleci/golang:latest
    environment:
      VERSION: "2.0"
      GOBIN: /go/bin
    working_directory: /go/src/github.com/kubelens/kubelens
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run: 
          name: Check API Changes
          command: |
            git diff --name-only --exit-code HEAD~1..HEAD  ./api && \
            echo 'export API_CHANGED=false' >> $BASH_ENV || \
            echo 'export API_CHANGED=true' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Run Test & Coverage
          command: |
            if ${API_CHANGED}; then
              cd ./api 
              make test
            fi
      - run:
          name: Halt If Pull Request
          command: '[[ -v CIRCLE_PR_NUMBER ]] && circleci step halt || true'
      - run:
          name: Build & Push Docker image
          command: |
            if ${API_CHANGED}; then
              cd ./api
              GIT_BRANCH=${CIRCLE_BRANCH} \
              TAG="${VERSION}.${CIRCLE_BUILD_NUM}" \
              DOCKER_ID=${DOCKER_ID} \
              DOCKER_USER=${DOCKER_USER} \
              make docker-build-push
            fi

  web_new_branch:
    docker: 
      - image: circleci/node:latest
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Get Dependencies
          command: | 
            cd ./web
            npm install
            echo "TODO run tests"
            # npm run test

  web_build:
    docker: 
      - image: circleci/node:latest
    environment:
      VERSION: "2.0"
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run: 
          name: Check Web Changes
          command: |
            git diff --name-only --exit-code HEAD~1..HEAD  ./web && \
            echo 'export WEB_CHANGED=false' >> $BASH_ENV || \
            echo 'export WEB_CHANGED=true' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Get Dependencies
          command: | 
            if ${WEB_CHANGED}; then
              cd ./web
              npm install
            fi
      - run:
          name: Run Test & Coverage
          command: |
            if ${WEB_CHANGED}; then
              cd ./web 
              echo "TODO run tests"
              # npm run test
            fi
      - run:
          name: Application Build
          command: |
            if ${WEB_CHANGED}; then
              cd ./web
              npm run build
            fi
      - run:
          name: Halt If Pull Request
          command: '[[ -v CIRCLE_PR_NUMBER ]] && circleci step halt || true'
      - run:
          name: Docker Build Push
          command: |
            if ${WEB_CHANGED}; then
              cd ./web
              GIT_BRANCH=${CIRCLE_BRANCH} \
              TAG="${VERSION}.${CIRCLE_BUILD_NUM}" \
              DOCKER_ID=${DOCKER_ID} \
              DOCKER_USER=${DOCKER_USER} \
              npm run docker-build-push
            fi
